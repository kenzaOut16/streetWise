package com.planifcarbon.backend.model;

import org.springframework.lang.Nullable;

/**
 * Represent data of a segment generated by dijkstra.
 */
public class DataSegment {
    private final Node nodeStart;
    private final Node nodeEnd;
    private final double arrivalTime;
    private final double departureTime;
    private final @Nullable
    MetroLine line;
    private final double distance;

    /**
     * Constructs a new DataSegment object with the given start and end nodes, arrival and departure times, metro
     * line (if applicable), and distance.
     *
     * @param nodeStart     the start node
     * @param nodeEnd       the end node
     * @param arrivalTime   the arrival time at the end node
     * @param departureTime the departure time from the start node
     * @param line          the metro line, or null if not applicable
     * @param distance      the distance between the nodes
     */
    public DataSegment(Node nodeStart, Node nodeEnd, double arrivalTime, double departureTime, @Nullable MetroLine line,
                       double distance) {
        this.nodeStart = nodeStart;
        this.nodeEnd = nodeEnd;
        this.arrivalTime = arrivalTime;
        this.departureTime = departureTime;
        this.line = line;
        this.distance = distance;
    }

    // getters (no setters because this is a data class)

    /**
     * Gets the start node for this data segment.
     *
     * @return the start node
     */
    public Node getNodeStart() {
        return nodeStart;
    }

    /**
     * Gets the end node for this data segment.
     *
     * @return the end node
     */
    public Node getNodeEnd() {
        return nodeEnd;
    }

    /**
     * Gets the arrival time for this data segment.
     *
     * @return the arrival time
     */
    public double getArrivalTime() {
        return arrivalTime;
    }

    /**
     * Gets the departure time for this data segment.
     *
     * @return the departure time
     */
    public double getDepartureTime() {
        return departureTime;
    }

    /**
     * Gets the metro line for this data segment, or null if not applicable.
     *
     * @return the metro line, or null if not applicable
     */
    public @Nullable
    MetroLine getLine() {
        return line;
    }

    /**
     * Gets the distance between the start and end nodes for this data segment.
     *
     * @return the distance
     */
    public double getDistance() {
        return distance;
    }

    /**
     * Standard deep equals method for this data segment. Returns true if the other object is a DataSegment with the
     * same
     * start and end nodes, arrival and departure times, metro line (if applicable), and distance.
     *
     * @param o the object to compare to
     * @return true if the objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object o) {
        if (o == this)
            return true;
        if (!(o instanceof DataSegment))
            return false;
        DataSegment ds = (DataSegment) o;
        return ds.getNodeStart().equals(getNodeStart()) && ds.getNodeEnd().equals(this.getNodeEnd())
                && ds.getArrivalTime() == this.getArrivalTime() && ds.getDepartureTime() == this.getDepartureTime()
                && ((ds.getLine() == null && this.getLine() == null) || ds.getLine().equals(this.getLine()))
                && ds.getDistance() == this.getDistance();
    }

    /**
     * Standard toString method for this data segment. Returns a string representation of the object, including the
     * start and end nodes, arrival and departure times, metro line (if applicable), and distance.
     *
     * @return string representing data segments information.
     */
    @Override
    public String toString() {
        return "DataSegment{" + "nodeStart=" + nodeStart + ", nodeEnd=" + nodeEnd + ", arrivalTime=" + arrivalTime +
                ", departureTime="
                + departureTime + ", line=" + line + ", distance=" + distance + '}';
    }
}
